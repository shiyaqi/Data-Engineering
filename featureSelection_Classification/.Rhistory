summary(fit2)
```
```{r outcome_variable_calculation, echo=TRUE, eval=FALSE}
patient_data <- transform(patient_data,
foobium = 7 + (age - 35) * ifelse(gender=='M', 0.05, -0.05) + rnorm(length(gender)))
```
```{r foobium_vs_age}
with(patient_data, plot(foobium ~ age))
fit1 <- lm(foobium ~ age, patient_data)
abline(fit1, col="blue")
summary(fit1)
```{r}
with(patient_data, {
plot(foobium ~ age, col=gender, xlim=c(0, 110))
legend("bottom", legend=levels(gender), text.col=seq_along(levels(gender)), bty='n')
})
fit2 <- lm(foobium ~ age*gender, patient_data)
points(patient_data$age, predict(fit2), col='yellow', pch=4)
p <- coef(fit2)
abline(p['(Intercept)'], p['age'])
abline(p['(Intercept)'] + p['genderM'], p['age'] + p['age:genderM'], col="red")
abline(v=0, lty=2)
p
abline(p['(Intercept)'], p['age'])
abline(p['(Intercept)'] + p['genderM'], p['age'] + p['age:genderM'], col="red")
abline(v=0, lty=2)
library(foreign)
?read.arff()
data <- read.arff("http://www.cs.usfca.edu/~pfrancislyon/uci-diabetes.arff")
data
data <- read.arff("http://www.cs.usfca.edu/~pfrancislyon/uci-diabetes.arff")
library(foreign)
data <- read.arff("http://www.cs.usfca.edu/~pfrancislyon/uci-diabetes.arff")
View(data)
View(data)
remove_na <- function(vec){
vec <- ifelse(vec==0,NA,vec)
}
remove_na <- function(vec){
vec <- ifelse(vec==0,NA,vec)
return vec
}
apply(remove_na,2,data)
vec <- ifelse(vec==0,NA,vec)
remove_na <- function(vec){
vec <- ifelse(vec==0,NA,vec)
return vec
remove_na <- function(vec){
vec <- ifelse(vec==0,NA,vec)
return
}
apply(remove_na,2,data)
?ifelse
remove_na <- function(vec){
remove_na <- function(vec){
vec <- ifelse(vec!=0, vec,NA)
return vec
remove_na <- function(vec){
vec <- ifelse(vec!=0, vec,NA)
return(vec)
}
apply(data,2,remove_na)
data <- read.arff("http://www.cs.usfca.edu/~pfrancislyon/uci-diabetes.arff")
data
remove_na <- function(vec){
vec <- ifelse(vec== 0, NA,vec)
return(vec)
}
apply(data,2,remove_na)
data <- read.arff("http://www.cs.usfca.edu/~pfrancislyon/uci-diabetes.arff")
apply(data,1,remove_na)
remove_na <- function(vec){
vec <- ifelse(vec== 0, NA,vec)
}
data <- read.arff("http://www.cs.usfca.edu/~pfrancislyon/uci-diabetes.arff")
remove_na <- function(vec){
vec <- ifelse(vec== 0, NA,vec)
}
apply(data,2,remove_na)
data[0]
data <- read.arff("http://www.cs.usfca.edu/~pfrancislyon/uci-diabetes.arff")
remove_na <- function(vec){
data
any.na(data[0])
?any.na(data[0])
any(is.na(data[0]))
data$preg
is.na(data$preg)
data <- read.arff("http://www.cs.usfca.edu/~pfrancislyon/uci-diabetes.arff")
library(foreign)
library(foreign)
data <- read.arff("http://www.cs.usfca.edu/~pfrancislyon/uci-diabetes.arff")
any(is.na(data$preg))
data$preg
data$preg <- ifelse(data$preg==0,NA,data$preg)
data$preg
any(is.na(data$preg))
remove_na <- function(vec){
vec <- ifelse(vec== 0, NA,vec)
return(vec)
}
data[1:8]
data[1:8]<-apply(data[1:8],2,remove_na)
data[1:8]
data
apply(data[1:8],2,shapiro.test)
hist(data[1])
histgram(data[1])
hist(data[1])
hist(data[1])
data[1]
hist(data[2])
g <- ggplot(data=data[1:8])
library(ggplot2)
g <- ggplot(data=data[1:8])
g + geom_hist(preg)
g <- ggplot(data=data[1:8])
g + geom_histogram(aes(x=preg))
ansari.test(preg~class,data)
mydata <- read.arff("http://www.cs.usfca.edu/~pfrancislyon/uci-diabetes.arff")
remove_na <- function(vec){
vec <- ifelse(vec== 0, NA,vec)
return(vec)
remove_na <- function(vec){
vec <- ifelse(vec== 0, NA,vec)
return(vec)
}
mydata[1:8]<-apply(mydata[1:8],2,remove_na)
apply(mydata[1:8],2,shapiro.test)
library(foreign)
library(foreign)
library(ggplot2)
mydata <- read.arff("http://www.cs.usfca.edu/~pfrancislyon/uci-diabetes.arff")
remove_na <- function(vec){
vec <- ifelse(vec== 0, NA,vec)
return(vec)
}
mydata[1:8]<-apply(mydata[1:8],2,remove_na)
apply(mydata[1:8],2,shapiro.test)
test_var <- function(vec){
print(ansari.test(vec~class,mydata))
}
apply(mydata[1:8],2,test_var)
ansari.test(preg~class,mydata)
ansari.test(mass~class,mydata)
t.test(preg~class,mydata,var.equal = T)
test_mean <- function(vec){
print(t.test(vec~class,mydata,var.equal=T))
}
apply(mydata[1:8],2,test_mean)
g <- ggplot(mydata)
g + geom_desity(aes(x=preg),color=class)
g + geom_density(aes(x=preg),color=class)
g + geom_density(aes(x=preg),color=class))
g + geom_density(aes(x=preg),color=class)
g + geom_density(aes(x=preg,color=class))
g + geom_density(aes(x=preg,fill=class))
g + geom_density(aes(x=preg,fill=class),alpha=0.5)
g + geom_density(aes(x=preg,fill=class),alpha=0.5)
g + geom_density(aes(x=plas,fill=class),alpha=0.5)
g + geom_density(aes(x=pres,fill=class),alpha=0.5)
g + geom_density(aes(x=skin,fill=class),alpha=0.5)
g + geom_density(aes(x=insu,fill=class),alpha=0.5)
g + geom_density(aes(x=mass,fill=class),alpha=0.5)
g + geom_density(aes(x=pedi,fill=class),alpha=0.5)
g + geom_density(aes(x=age,fill=class),alpha=0.5)
apply(mydata[1:8],2,shapiro.test)
shapiro.test(preg,data=mydata)
shapiro.test(mydata$preg)
shapiro.test(mydata$plas)
shapiro.test(mydata$pres)
shapiro.test(mydata$pres[class=='tested_negative'])
mydata$pres[class=='tested_negative']
shapiro.test(mydata$pres[mydata$class==tested_negative'])
shapiro.test(mydata$pres[mydata$class=='tested_negative'])
shapiro.test(mydata$pres[mydata$class=="tested_negative"])
shapiro.test(mydata$pres[mydata$class=="tested_positive"])
shapiro.test(mydata$preg[mydata$class=="tested_negative"])
shapiro.test(mydata$preg[mydata$class=="tested_positive"])
shapiro.test(mydata$plas[mydata$class=="tested_negative"])
shapiro.test(mydata$plas[mydata$class=="tested_positive"])
shapiro.test(mydata$pres[mydata$class=="tested_negative"])
shapiro.test(mydata$pres[mydata$class=="tested_positive"])
shapiro.test(mydata$skin[mydata$class=="tested_negative"])
shapiro.test(mydata$skin[mydata$class=="tested_positive"])
shapiro.test(mydata$insu[mydata$class=="tested_negative"])
shapiro.test(mydata$insu[mydata$class=="tested_positive"])
shapiro.test(mydata$mass[mydata$class=="tested_negative"])
shapiro.test(mydata$mass[mydata$class=="tested_positive"])
shapiro.test(mydata$pedi[mydata$class=="tested_negative"])
shapiro.test(mydata$pedi[mydata$class=="tested_positive"])
shapiro.test(mydata$age[mydata$class=="tested_negative"])
shapiro.test(mydata$age[mydata$class=="tested_positive"])
cor(mydata[-8])
cor(mydata[-9])
pcor(mydata[-9])
cor(mydata[-9],na.rm=T)
cor(mydata[-9],use='na.or.complete')
?pcor(mydata[-9],use='na.or.complete')
pcor(mydata[-9],use='na.or.complete')
library (ppcor)
pcor(mydata[-9],use='na.or.complete')
pcor(mydata[-9])
cor(mydata[-9],use='na.or.complete')
?ggpairs
?var.test()
cor(mydata[-9],use='na.or.complete')
g <- ggplot(mydata)
g + geom_density(aes(x=preg,fill=class),alpha=0.5)
g + geom_density(aes(x=plas,fill=class),alpha=0.5)
g + geom_density(aes(x=pres,fill=class),alpha=0.5)
apply(mydata[1:8],2,test_mean)
g + geom_density(aes(x=skin,fill=class),alpha=0.5)
cor(mydata[-9],use='na.or.complete')
fit_all <- glm(class ~ ., family=binomial(link="logit"), data=mydata)
summary(fit_all)
mydata
shapiro.test(mydata$pres[mydata$class=="tested_negative"])
shapiro.test(mydata$pres[mydata$class=="tested_positive"])
test_mean <- function(vec){
print(t.test(vec~class,mydata,var.equal=T))
}
t.test(preg~class,mydata,var.equal = T)
apply(mydata[1:8],2,test_mean)
test_mean2 <- function(vec){
print(t.test(vec~class,mydata,var.equal=F))
}
t.test(preg~class,mydata,var.equal = T)
apply(mydata[1:8],2,test_mean2)
apply(mydata[1:8],2,test_mean2)
test_mean2 <- function(vec){
print(t.test(vec~class,mydata,var.equal=F))
}
t.test(preg~class,mydata,var.equal = F)
apply(mydata[1:8],2,test_mean2)
fit_all <- glm(class ~ ., family=binomial(link="logit"), data=mydata)
summary(fit_all)
test_var <- function(vec){
print(ansari.test((vec-median(vec,na.rm=T))~class,mydata))
}
apply(mydata[1:8],2,test_var)
t.test(pres~class,mydata,var.equal = F)
apply(mydata[1:8],2,test_mean)
t.test(pedi~class,mydata,var.equal = F)
fit_all <- glm(class ~ ., family=binomial(link="logit"), data=mydata)
summary(fit_all)
fit_-preg <- glm(class ~ .-preg, family=binomial(link="logit"), data=mydata)
fit_no_preg <- glm(class ~ .-preg, family=binomial(link="logit"), data=mydata)
summary(fit_no_preg)
replace_NA_mean <- function(vec){
new_vec <- ifelse(is.na(vec),mean(vec),vec)
return(new_vec)
}
new_data <- apply(mydata,2,replace_NA_mean)
new_data0 <- apply(mydata[-9],2,replace_NA_mean)
new_data0
mydata
mydata <- read.arff("http://www.cs.usfca.edu/~pfrancislyon/uci-diabetes.arff")
remove_na <- function(vec){
new_vec <- ifelse(vec== 0, NA,vec)
return(new_vec)
}
mydata <- read.arff("http://www.cs.usfca.edu/~pfrancislyon/uci-diabetes.arff")
mydata
mydata1<-apply(mydata[2:8],2,remove_na)
mydata1
mydata
mydata2<- data.frame(mydata$preg,mydata1)
mydata2
apply(mydata2,2,shapiro.test)
shapiro.test(mydata2$preg[mydata$class=="tested_negative"])
shapiro.test(mydata2$preg[mydata$class=="tested_positive"])
mydata2<- data.frame(mydata$preg,mydata1,mydata$class)
mydata2
name(mydata2)
names(mydata2)
names(mydata2)[1,9] <- ("preg","class")
names(mydata2)[1,9] <- c("preg","class")
names(mydata2)[1,9]
names(mydata2)[1]
names(mydata2)[1,8]
names(mydata2)[(1,9)]
names(mydata2)[c(1,9)]
names(mydata2)[c(1,9)] <- c("preg","class")
apply(mydata2,2,shapiro.test)
apply(mydata2[1:8],2,shapiro.test)
shapiro.test(mydata2$preg[mydata$class=="tested_negative"])
shapiro.test(mydata2$preg[mydata$class=="tested_positive"])
shapiro.test(mydata$plas[mydata2$class=="tested_negative"])
shapiro.test(mydata$plas[mydata2$class=="tested_positive"])
shapiro.test(mydata$pres[mydata$class=="tested_negative"])
shapiro.test(mydata$pres[mydata$class=="tested_positive"])
shapiro.test(mydata$pres[mydata$class=="tested_negative"])
shapiro.test(mydata$pres[mydata$class=="tested_positive"])
#pres by class are not normally distribution
shapiro.test(mydata$skin[mydata$class=="tested_negative"])
shapiro.test(mydata$skin[mydata$class=="tested_positive"])
#skin by class are not normally distribution
shapiro.test(mydata$insu[mydata$class=="tested_negative"])
shapiro.test(mydata$insu[mydata$class=="tested_positive"])
#insu by class are not normally distribution
shapiro.test(mydata$mass[mydata$class=="tested_negative"])
shapiro.test(mydata$mass[mydata$class=="tested_positive"])
#mass by class are not normally distribution
shapiro.test(mydata$pedi[mydata$class=="tested_negative"])
shapiro.test(mydata$pedi[mydata$class=="tested_positive"])
#pedi by class are not normally distribution
shapiro.test(mydata$age[mydata$class=="tested_negative"])
shapiro.test(mydata$age[mydata$class=="tested_positive"])
#age by class are not normally distribution
#2.2 Test if variance are the same using ansari test
test_var <- function(vec){
print(ansari.test((vec-median(vec,na.rm=T))~class,mydata))
}
apply(mydata[1:8],2,test_var)
test_mean <- function(vec){
print(t.test(vec~class,mydata))
}
apply(mydata[1:8],2,test_mean)
g <- ggplot(mydata)
g + geom_density(aes(x=preg,fill=class),alpha=0.5)
g + geom_density(aes(x=plas,fill=class),alpha=0.5)
g + geom_density(aes(x=pres,fill=class),alpha=0.5)
g + geom_density(aes(x=skin,fill=class),alpha=0.5)
g + geom_density(aes(x=insu,fill=class),alpha=0.5)
g + geom_density(aes(x=mass,fill=class),alpha=0.5)
g + geom_density(aes(x=pedi,fill=class),alpha=0.5)
g + geom_density(aes(x=age,fill=class),alpha=0.5)
g + geom_density(aes(x=preg,fill=class),alpha=0.5)
g + geom_density(aes(x=preg,fill=class),alpha=0.5)
View(mydata2)
View(mydata2)
shapiro.test(mydata2$plas[mydata2$class=="tested_negative"])
shapiro.test(mydata2$plas[mydata2$class=="tested_positive"])
shapiro.test(mydata2$pres[mydata$class=="tested_negative"])
shapiro.test(mydata2$pres[mydata$class=="tested_positive"])
shapiro.test(mydata2$skin[mydata$class=="tested_negative"])
shapiro.test(mydata2$skin[mydata$class=="tested_positive"])
shapiro.test(mydata2$insu[mydata$class=="tested_negative"])
shapiro.test(mydata2$insu[mydata$class=="tested_positive"])
shapiro.test(mydata2$mass[mydata$class=="tested_negative"])
shapiro.test(mydata2$mass[mydata$class=="tested_positive"])
shapiro.test(mydata2$pedi[mydata$class=="tested_negative"])
shapiro.test(mydata2$pedi[mydata$class=="tested_positive"])
#pedi by class are not normally distribution
shapiro.test(mydata2$age[mydata$class=="tested_negative"])
shapiro.test(mydata2$age[mydata$class=="tested_positive"])
apply(mydata2[1:8],2,test_var)
test_mean <- function(vec){
print(t.test(vec~class,mydata))
}
apply(mydata2[1:8],2,test_mean)
test_mean <- function(vec){
print(t.test(vec~class,mydata))
}
apply(mydata2[1:8],2,test_mean)
library(foreign)
library(ggplot2)
library(ppcor)
#1.Remove 0 to NA
mydata <- read.arff("http://www.cs.usfca.edu/~pfrancislyon/uci-diabetes.arff")
remove_na <- function(vec){
new_vec <- ifelse(vec== 0, NA,vec)
return(new_vec)
}
mydata1<-apply(mydata[2:8],2,remove_na)#did not replace 0 in preg
mydata2<- data.frame(mydata$preg,mydata1,mydata$class)
names(mydata2)[c(1,9)] <- c("preg","class") # Changed the name of mydata2
#2.1Test Normality
apply(mydata2[1:8],2,shapiro.test)
#Reject normal distribuition for column 1 to column8
shapiro.test(mydata2$preg[mydata$class=="tested_negative"])
shapiro.test(mydata2$preg[mydata$class=="tested_positive"])
#preg by class are not normally distribution
shapiro.test(mydata2$plas[mydata2$class=="tested_negative"])
shapiro.test(mydata2$plas[mydata2$class=="tested_positive"])
#plas by class are not normally distribution
shapiro.test(mydata2$pres[mydata$class=="tested_negative"])
shapiro.test(mydata2$pres[mydata$class=="tested_positive"])
#pres by class are not normally distribution
shapiro.test(mydata2$skin[mydata$class=="tested_negative"])
shapiro.test(mydata2$skin[mydata$class=="tested_positive"])
#skin by class are not normally distribution
shapiro.test(mydata2$insu[mydata$class=="tested_negative"])
shapiro.test(mydata2$insu[mydata$class=="tested_positive"])
#insu by class are not normally distribution
shapiro.test(mydata2$mass[mydata$class=="tested_negative"])
shapiro.test(mydata2$mass[mydata$class=="tested_positive"])
#mass by class are not normally distribution
shapiro.test(mydata2$pedi[mydata$class=="tested_negative"])
shapiro.test(mydata2$pedi[mydata$class=="tested_positive"])
#pedi by class are not normally distribution
shapiro.test(mydata2$age[mydata$class=="tested_negative"])
shapiro.test(mydata2$age[mydata$class=="tested_positive"])
#age by class are not normally distribution
#2.2 Test if variance are the same using ansari test
test_var <- function(vec){
print(ansari.test((vec-median(vec,na.rm=T))~class,mydata))
}
apply(mydata2[1:8],2,test_var)
#Preg, Plas, Mass have different variance.
#Pedi, Skin, Insu, and Pres have same variance
#The P value for testing if age of different classes have same variance is 0.05282
#Due to the board effect, cannot reject or accept the null hypothesis.
#Other variables of different classes have the same variance.
#I decide to use the default t test to test the mean.
#2.3 Two sample T-test to exam if mean are equal.
test_mean <- function(vec){
print(t.test(vec~class,mydata))
test_var <- function(vec){
print(ansari.test((vec-median(vec,na.rm=T))~class,mydata2))
}
apply(mydata2[1:8],2,test_var)
libarary(dataset)
library(dataset)
library(datasets)
data(airquality)
summary(airquality)
vec <- 1:10
vec[2,2]
vec[c(2,2)]
vec[-c(2,2)]
rep("label1",10)
c((rep("label1",10)),(rep("label2",5)))
norm1 <- rnorm(1000)
#1b
norm2 <- rnorm(1000, mean = 5, sd = 3)
#1c
par(mfrow = c(1,2))
hist(norm1, xlim = c(-5, 15), ylim = c(0, 250))
hist(norm2, xlim = c(-5, 15), ylim = c(0, 250))
#2a
library(ggplot2)
library (reshape2)
dt1 <- data.frame(norm1,norm2)
long_dt1 <- melt(dt1)
long_dt1
head(long_dt1)
dt1
head(long_dt1)
pnorm(1,0,1)
pnorm(1,5,3)
x_norm1 <- seq(-1,1,length = 1000)
cumulative1 <- pnorm(x_norm1, 0, 1)
plot(x_norm1, cumulative1, col="darkorange", xlab="", ylab="Cumulative Probability",
type="l",lwd=2, cex=2, cex.axis=.8)
x_norm2 <- seq(-1,1,length = 1000)
cumulative2 <- pnorm(x_norm2, 5, 3)
plot(x_norm2, cumulative2, col="darkorange", xlab="", ylab="Cumulative Probability",
type="l",lwd=2, cex=2, cex.axis=.8)
height <- dnorm(0)
height
unif1 <- runif(1000, 0, 1)
unif1
?runif
df5 <- data.frame(unif1,unif2)
long_df5 <- melt(df5)
ggplot(long_df5, aes(x = value)) + geom_histogram() + facet_wrap(~variable)
unif1 <- ?runif(1000, 0, 1)
unif2 <- runif(1000, 20, 30)
#11
df5 <- data.frame(unif1,unif2)
long_df5 <- melt(df5)
unif1 <- runif(1000, 0, 1)
unif2 <- runif(1000, 20, 30)
#11
df5 <- data.frame(unif1,unif2)
long_df5 <- melt(df5)
ggplot(long_df5, aes(x = value)) + geom_histogram() + facet_wrap(~variable)
library(DBI)
# RSQLite This package embeds the SQLite database engine in R and
#  provides an interface compliant with the DBI package
library(RSQLite)
# Create temporary in-memory db
con <- dbConnect(RSQLite::SQLite(), "mtcars.db") # existing database file, not flat file
dbListTables(con)
dbReadTable(con, "mtcars")
dbExistsTable(con, "mtcars")
res <- dbSendQuery(con, "select * from mtcars")
dbFetch(res)  #  fetches the entire resultset
dbClearResult(con)
dbDisconnect(con)
dbGetQuery(con, "select mpg, cyl,disp from mtcars where wt < 4.0")
con <- dbConnect(RSQLite::SQLite(), "mtcars.db") # existing database file, not flat file
dbListTables(con)
dbReadTable(con, "mtcars")
dbGetQuery(con, "select mpg, cyl,disp from mtcars where wt < 4.0")
setwd('/Users/Anna/Documents/HS614/shiyaqi-lab-8')
data <- read.table('data.csv', sep = ',')
data[, 5] <- as.numeric(rownames(data))
names(data) <- c('ctm2','age','los','outcome','ctm1')
cor(data$ctm2,data$ctm1)
fit <- glm(data$outcome~.)
datalab <- read.table('data.csv', sep = ',')
datalab[, 5] <- as.numeric(rownames(data))
names(datalan) <- c('ctm2','age','los','outcome','ctm1')
cor(data$ctm2,data$ctm1)
fit <- glm(outcome~. data = datalab)
setwd('/Users/Anna/Documents/HS614/shiyaqi-lab-8')
datalab <- read.table('data.csv', sep = ',')
datalab[, 5] <- as.numeric(rownames(data))
names(datalan) <- c('ctm2','age','los','outcome','ctm1')
cor(datalab$ctm2,datalab$ctm1)
fit <- glm(outcome~., data = datalab)
names(datalan) <- c('ctm2','age','los','outcome','ctm1')
names(datalab) <- c('ctm2','age','los','outcome','ctm1')
cor(datalab$ctm2,datalab$ctm1)
fit <- glm(outcome~., data = datalab)
summary(fit)
fit1 <- glm(outcome~.-age, data = datalab)
summary(fit1)
cor(datalab)
